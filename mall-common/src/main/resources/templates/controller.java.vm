package ${package.Controller};
import cn.com.mall.base.bean.result.PaginationResult;
import cn.com.mall.base.bean.result.StandardResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.mapper.Wrapper;
import com.baomidou.mybatisplus.plugins.Page;
import ${package.Service}.${table.serviceName};
import ${cfg.entityModelPackage}.${entity}Model;
import ${cfg.queryFormPackage}.${entity}QueryForm;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;

/**
 *　　
 *   ${entity} 控制器    ${table.comment}
 *
 *   @author ${author}
 *   @since ${date}
 */

@RestController
@Api(tags="${table.controllerName} ${table.comment}控制器")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    private final Logger logger = LoggerFactory.getLogger(${table.controllerName}.class);

    @Autowired
    public ${table.serviceName} ${table.entityPath}Service;

    /**
     * 获取分页列表
     *
     * @author : ${author}
     * @since : Create in ${date}
     */
    @ApiOperation(value="获取分页列表  ${author}", notes="获取分页列表  ${author}", response = ${entity}Model.class)
    @ApiImplicitParam(paramType = "header", name = "accessToken", value = "令牌", required = true, dataType = "String")
    @GetMapping("/${table.entityPath}")
    public StandardResult selectPage(@ModelAttribute ${entity}QueryForm ${table.entityPath}QueryForm) {

        final Page<PermissionInfoModel> page = ${table.entityPath}QueryForm.getPage();
        Wrapper<${entity}Model> wrapper = new EntityWrapper<>();
        ${table.entityPath}Service.selectPage(page, wrapper);
        return PaginationResult.ok(null, page.getRecords(), page.getTotal(), page.getPages());
    }

	/**
     * 获取列表
     *
     * @author : ${author}
     * @since : Create in ${date}
     */
    @ApiOperation(value="获取列表  ${author}", notes="获取列表  ${author}", response = ${entity}Model.class)
    @ApiImplicitParam(paramType = "header", name = "accessToken", value = "令牌", required = true, dataType = "String")
    @GetMapping("/${table.entityPath}List")
    public StandardResult selectList(@ModelAttribute ${entity}Model ${table.entityPath}Model) {
        Wrapper<${entity}Model> wrapper = new EntityWrapper<>(${table.entityPath}Model);
        return StandardResult.ok(null, ${table.entityPath}Service.selectList(wrapper));
    }

     /**
     * 添加
     * @author : ${author}
     * @since : Create in ${date}
     */
    @ApiOperation(value = "添加  ${author}", notes = "添加${entity} ${author}", response = ${entity}Model.class)
    @PostMapping("/${table.entityPath}")
    @ApiImplicitParam(paramType = "header", name = "accessToken", value = "令牌", required = true, dataType = "String")
    public StandardResult insert(@ModelAttribute ${entity}Model ${table.entityPath}Model) {
        ${table.entityPath}Service.insert(${table.entityPath}Model);
        return StandardResult.ok();
    }

    /**
     * 修改
     * @author : ${author}
     * @since : Create in ${date}
     */
    @ApiOperation(value="修改  ${author}", notes="更新${entity} ${author}", response = ${entity}Model.class)
    @ApiImplicitParam(paramType = "header", name = "accessToken", value = "令牌", required = true, dataType = "String")
    @PutMapping("/${table.entityPath}")
    public StandardResult updateById(@RequestBody ${entity}Model ${table.entityPath}Model) {
        ${table.entityPath}Service.updateById(${table.entityPath}Model);
        return StandardResult.ok();
    }

    /**
     * 通过id获取详情
     *
     * @author : ${author}
     * @since : Create in ${date}
     */
    @ApiOperation(value="通过id获取详情  ${author}", notes="通过id获取详情  ${author}", response = ${entity}Model.class)
    @ApiImplicitParam(paramType = "header", name = "accessToken", value = "令牌", required = true, dataType = "String")
    @GetMapping("/${table.entityPath}/{id}")
    public StandardResult selectById(@PathVariable @NotEmpty String id) {
        return StandardResult.ok(${table.entityPath}Service.selectById(id));
    }

    /**
     * 通过id删除数据
     *
     * @author : ${author}
     * @since : Create in ${date}
     */
    @ApiOperation(value="通过id删除数据  ${author}", notes="通过id删除数据  ${author}", response = ${entity}Model.class)
    @ApiImplicitParam(paramType = "header", name = "accessToken", value = "令牌", required = true, dataType = "String")
    @DeleteMapping("/${table.entityPath}/{id}")
    public StandardResult deleteById(@PathVariable String id) {
        ${table.entityPath}Service.deleteById(id);
        return StandardResult.ok();
    }
}
